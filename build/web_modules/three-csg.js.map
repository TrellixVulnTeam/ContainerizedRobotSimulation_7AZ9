{"version":3,"file":"three-csg.js","sources":["../../node_modules/three-csg/three-csg.js"],"sourcesContent":["(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('three')) :\n    typeof define === 'function' && define.amd ? define(['exports', 'three'], factory) :\n    (global = global || self, factory(global.threecsg = {}, global.THREE));\n}(this, function (exports, three) { 'use strict';\n\n    const EPSILON = 1e-6;\n    const CLASSIFY_COPLANAR = 0;\n    const CLASSIFY_FRONT = 1;\n    const CLASSIFY_BACK = 2;\n    const CLASSIFY_SPANNING = 3;\n    const tempVector3 = new three.Vector3();\n    class Triangle {\n        constructor(a, b, c) {\n            this.a = a.clone();\n            this.b = b.clone();\n            this.c = c.clone();\n            this.normal = new three.Vector3();\n            this.w = 0;\n            this.computeNormal();\n        }\n        computeNormal() {\n            tempVector3.copy(this.c).sub(this.a);\n            this.normal.copy(this.b).sub(this.a).cross(tempVector3).normalize();\n            this.w = this.normal.dot(this.a);\n        }\n        classifyPoint(point) {\n            const side = this.normal.dot(point) - this.w;\n            if (Math.abs(side) < EPSILON)\n                return CLASSIFY_COPLANAR;\n            if (side > 0)\n                return CLASSIFY_FRONT;\n            return CLASSIFY_BACK;\n        }\n        classifySide(triangle) {\n            let side = CLASSIFY_COPLANAR;\n            side |= this.classifyPoint(triangle.a);\n            side |= this.classifyPoint(triangle.b);\n            side |= this.classifyPoint(triangle.c);\n            return side;\n        }\n        invert() {\n            const { a, c } = this;\n            this.a = c;\n            this.c = a;\n            this.normal.multiplyScalar(-1);\n            this.w *= -1;\n        }\n        clone() {\n            return new Triangle(this.a.clone(), this.b.clone(), this.c.clone());\n        }\n    }\n\n    function isBufferGeometry(geometry) {\n        return geometry instanceof three.BufferGeometry;\n    }\n    function isConvexSet(triangles) {\n        for (let i = 0; i < triangles.length; i++) {\n            for (let j = i + 1; j < triangles.length; j++) {\n                const side = triangles[i].classifySide(triangles[j]);\n                if (side & CLASSIFY_FRONT)\n                    return false;\n            }\n        }\n        return true;\n    }\n\n    const MINIMUM_RELATION = 0.8; // 0 -> 1\n    const MINIMUM_RELATION_SCALE = 10; // should always be >2\n    /**\n     * Algorithm adapted from Binary Space Partioning Trees and Polygon Removal in Real Time 3D Rendering\n     * Samuel Ranta-Eskola, 2001\n     */\n    function chooseDividingTriangle(triangles) {\n        if (isConvexSet(triangles))\n            return triangles[0];\n        let minimumRelation = MINIMUM_RELATION;\n        let bestTriangle = undefined;\n        let leastSplits = Infinity;\n        let bestRelation = 0;\n        // Find the triangle that best divides the set\n        while (bestTriangle === undefined) {\n            for (let i = 0; i < triangles.length; i++) {\n                const triangleOuter = triangles[i];\n                // Count the number of polygons on the positive side, negative side, and spanning the plane defined by the current triangle\n                let numFront = 0;\n                let numBack = 0;\n                let numSpanning = 0;\n                for (let j = 0; j < triangles.length; j++) {\n                    if (i === j)\n                        continue;\n                    const triangleInner = triangles[j];\n                    const side = triangleOuter.classifySide(triangleInner);\n                    if (side === CLASSIFY_SPANNING) {\n                        numSpanning++;\n                    }\n                    else if (side === CLASSIFY_FRONT) {\n                        numFront++;\n                    }\n                    else if (side === CLASSIFY_BACK) {\n                        numBack++;\n                    }\n                }\n                // Calculate the relation between the number of triangles in the two sets divided by the current triangle\n                const relation = numFront < numBack ? numFront / numBack : numBack / numFront;\n                // Compare the results given by the current triangle to the best so far.\n                // If the this triangle splits fewer triangles and the relation\n                // between the resulting sets is acceptable this is the new candidate\n                // triangle. If the current triangle splits the same amount of triangles\n                // as the best triangle so far and the relation between the two\n                // resulting sets is better then this triangle is the new candidate\n                // triangle.\n                if (minimumRelation === 0 ||\n                    (relation > minimumRelation &&\n                        (numSpanning < leastSplits ||\n                            (numSpanning === leastSplits && relation > bestRelation)))) {\n                    bestTriangle = triangleOuter;\n                    leastSplits = numSpanning;\n                    bestRelation = relation;\n                }\n            }\n            minimumRelation = minimumRelation / MINIMUM_RELATION_SCALE;\n        }\n        return bestTriangle;\n    }\n    class BSPNode {\n        constructor(triangles) {\n            this.triangles = [];\n            this.isInverted = false;\n            this.boundingBox = new three.Box3();\n            if (triangles !== undefined) {\n                this.buildFrom(triangles);\n            }\n        }\n        static interpolateVectors(a, b, t) {\n            return a.clone().lerp(b, t);\n        }\n        static verticesToTriangles(vertices) {\n            const triangles = [];\n            for (let i = 2; i < vertices.length; i++) {\n                const a = vertices[0];\n                const b = vertices[i - 1];\n                const c = vertices[i];\n                const triangle = new Triangle(a, b, c);\n                triangles.push(triangle);\n            }\n            return triangles;\n        }\n        buildFrom(triangles) {\n            if (this.divider === undefined) {\n                const bestDivider = chooseDividingTriangle(triangles);\n                if (bestDivider === undefined) {\n                    this.divider = triangles[0].clone();\n                    this.triangles = triangles;\n                }\n                else {\n                    this.divider = bestDivider.clone();\n                    this.triangles = [];\n                    this.addTriangles(triangles);\n                }\n            }\n            else {\n                this.addTriangles(triangles);\n            }\n        }\n        addTriangles(triangles) {\n            const frontTriangles = [];\n            const backTriangles = [];\n            for (let i = 0; i < triangles.length; i++) {\n                const triangle = triangles[i];\n                this.boundingBox.min.set(Math.min(this.boundingBox.min.x, triangle.a.x, triangle.b.x, triangle.c.x), Math.min(this.boundingBox.min.y, triangle.a.y, triangle.b.y, triangle.c.y), Math.min(this.boundingBox.min.z, triangle.a.z, triangle.b.z, triangle.c.z));\n                this.boundingBox.max.set(Math.max(this.boundingBox.max.x, triangle.a.x, triangle.b.x, triangle.c.x), Math.max(this.boundingBox.max.y, triangle.a.y, triangle.b.y, triangle.c.y), Math.max(this.boundingBox.max.z, triangle.a.z, triangle.b.z, triangle.c.z));\n                const side = this.divider.classifySide(triangle);\n                if (side === CLASSIFY_COPLANAR) {\n                    this.triangles.push(triangle);\n                }\n                else if (side === CLASSIFY_FRONT) {\n                    frontTriangles.push(triangle);\n                }\n                else if (side === CLASSIFY_BACK) {\n                    backTriangles.push(triangle);\n                }\n                else {\n                    BSPNode.splitTriangle(triangle, this.divider, frontTriangles, backTriangles);\n                }\n            }\n            if (frontTriangles.length) {\n                if (this.front === undefined) {\n                    this.front = new BSPNode(frontTriangles);\n                }\n                else {\n                    this.front.addTriangles(frontTriangles);\n                }\n            }\n            if (backTriangles.length) {\n                if (this.back === undefined) {\n                    this.back = new BSPNode(backTriangles);\n                }\n                else {\n                    this.back.addTriangles(backTriangles);\n                }\n            }\n        }\n        invert() {\n            this.isInverted = !this.isInverted;\n            if (this.divider !== undefined)\n                this.divider.invert();\n            if (this.front !== undefined)\n                this.front.invert();\n            if (this.back !== undefined)\n                this.back.invert();\n            const temp = this.front;\n            this.front = this.back;\n            this.back = temp;\n            for (let i = 0; i < this.triangles.length; i++) {\n                this.triangles[i].invert();\n            }\n        }\n        // Remove all triangles in this BSP tree that are inside the other BSP tree\n        clipTo(tree) {\n            if (tree.isInverted === false && this.isInverted === false && this.boundingBox.intersectsBox(tree.boundingBox) === false)\n                return;\n            this.triangles = tree.clipTriangles(this.triangles);\n            if (this.front !== undefined)\n                this.front.clipTo(tree);\n            if (this.back !== undefined)\n                this.back.clipTo(tree);\n        }\n        // Recursively remove all triangles from `triangles` that are inside this BSP tree\n        clipTriangles(triangles) {\n            if (!this.divider)\n                return triangles.slice();\n            let frontTriangles = [];\n            let backTriangles = [];\n            // not a leaf node / convex set\n            for (let i = 0; i < triangles.length; i++) {\n                const triangle = triangles[i];\n                const side = this.divider.classifySide(triangle);\n                if (side === CLASSIFY_FRONT) {\n                    frontTriangles.push(triangle);\n                }\n                else if (side === CLASSIFY_BACK) {\n                    backTriangles.push(triangle);\n                }\n                else if (side == CLASSIFY_COPLANAR) {\n                    const dot = this.divider.normal.dot(triangle.normal);\n                    if (dot > 0) {\n                        frontTriangles.push(triangle);\n                    }\n                    else {\n                        backTriangles.push(triangle);\n                    }\n                }\n                else if (side === CLASSIFY_SPANNING) {\n                    BSPNode.splitTriangle(triangle, this.divider, frontTriangles, backTriangles);\n                }\n            }\n            if (this.front !== undefined)\n                frontTriangles = this.front.clipTriangles(frontTriangles);\n            if (this.back !== undefined) {\n                backTriangles = this.back.clipTriangles(backTriangles);\n            }\n            else {\n                backTriangles = [];\n            }\n            return frontTriangles.concat(backTriangles);\n        }\n        getTriangles() {\n            let triangles = this.triangles.slice();\n            if (this.front !== undefined)\n                triangles = triangles.concat(this.front.getTriangles());\n            if (this.back !== undefined)\n                triangles = triangles.concat(this.back.getTriangles());\n            return triangles;\n        }\n        clone(transform) {\n            const clone = new BSPNode();\n            clone.isInverted = this.isInverted;\n            clone.boundingBox.min.copy(this.boundingBox.min);\n            clone.boundingBox.max.copy(this.boundingBox.max);\n            if (transform) {\n                clone.boundingBox.min.applyMatrix4(transform);\n                clone.boundingBox.max.applyMatrix4(transform);\n            }\n            if (this.divider !== undefined) {\n                clone.divider = this.divider.clone();\n                if (transform) {\n                    clone.divider.a.applyMatrix4(transform);\n                    clone.divider.b.applyMatrix4(transform);\n                    clone.divider.c.applyMatrix4(transform);\n                }\n            }\n            if (this.front !== undefined)\n                clone.front = this.front.clone(transform);\n            if (this.back !== undefined)\n                clone.back = this.back.clone(transform);\n            const clonedTriangles = [];\n            for (let i = 0; i < this.triangles.length; i++) {\n                const clonedTriangle = this.triangles[i].clone();\n                if (transform) {\n                    clonedTriangle.a.applyMatrix4(transform);\n                    clonedTriangle.b.applyMatrix4(transform);\n                    clonedTriangle.c.applyMatrix4(transform);\n                    clonedTriangle.computeNormal();\n                }\n                clonedTriangles.push(clonedTriangle);\n            }\n            clone.triangles = clonedTriangles;\n            return clone;\n        }\n        toGeometry() {\n            const geometry = new three.Geometry();\n            const triangles = this.getTriangles();\n            for (let i = 0; i < triangles.length; i++) {\n                const triangle = triangles[i];\n                const vertexIndex = geometry.vertices.length;\n                geometry.vertices.push(triangle.a, triangle.b, triangle.c);\n                const face = new three.Face3(vertexIndex, vertexIndex + 1, vertexIndex + 2, triangle.normal);\n                geometry.faces.push(face);\n            }\n            return geometry;\n        }\n    }\n    BSPNode.splitTriangle = function splitTriangle(triangle, divider, frontTriangles, backTriangles) {\n        const vertices = [triangle.a, triangle.b, triangle.c];\n        const frontVertices = [];\n        const backVertices = [];\n        for (let i = 0; i < 3; i++) {\n            const j = (i + 1) % 3;\n            const vi = vertices[i];\n            const vj = vertices[j];\n            const ti = divider.classifyPoint(vi);\n            const tj = divider.classifyPoint(vj);\n            if (ti != CLASSIFY_BACK)\n                frontVertices.push(vi);\n            if (ti != CLASSIFY_FRONT)\n                backVertices.push(vi);\n            if ((ti | tj) === CLASSIFY_SPANNING) {\n                const t = (divider.w - divider.normal.dot(vi)) / divider.normal.dot(vj.clone().sub(vi));\n                const v = BSPNode.interpolateVectors(vi, vj, t);\n                frontVertices.push(v);\n                backVertices.push(v);\n            }\n        }\n        if (frontVertices.length >= 3)\n            Array.prototype.push.apply(frontTriangles, BSPNode.verticesToTriangles(frontVertices));\n        if (backVertices.length >= 3)\n            Array.prototype.push.apply(backTriangles, BSPNode.verticesToTriangles(backVertices));\n    };\n\n    function convertGeometryToTriangles(geometry) {\n        if (isBufferGeometry(geometry)) {\n            throw new Error('threecsg: Only Three.Geometry is supported.');\n        }\n        const triangles = [];\n        const { faces, vertices } = geometry;\n        for (let i = 0; i < faces.length; i++) {\n            const face = faces[i];\n            const a = vertices[face.a].clone();\n            const b = vertices[face.b].clone();\n            const c = vertices[face.c].clone();\n            const triangle = new Triangle(a, b, c);\n            triangles.push(triangle);\n        }\n        return triangles;\n    }\n    function transformBSP(bsp, mesh) {\n        mesh.updateMatrixWorld(true);\n        const { matrixWorld: transform } = mesh;\n        return bsp.clone(transform);\n    }\n\n    function intersect(a, b) {\n        const a2 = a.clone();\n        const b2 = b.clone();\n        a2.invert();\n        b2.clipTo(a2);\n        b2.invert();\n        a2.clipTo(b2);\n        b2.clipTo(a2);\n        a2.invert();\n        b2.invert();\n        a2.buildFrom(b2.getTriangles());\n        return a2;\n    }\n    function union(a, b) {\n        const a2 = a.clone();\n        const b2 = b.clone();\n        a2.clipTo(b2);\n        b2.clipTo(a2);\n        b2.invert();\n        b2.clipTo(a2);\n        b2.invert();\n        a2.buildFrom(b2.getTriangles());\n        return a2;\n    }\n    function subtract(a, b) {\n        const a2 = a.clone();\n        const b2 = b.clone();\n        a2.invert();\n        a2.clipTo(b2);\n        b2.clipTo(a2);\n        b2.invert();\n        b2.clipTo(a2);\n        a2.invert();\n        a2.buildFrom(b2.getTriangles());\n        return a2;\n    }\n\n    var boolean = /*#__PURE__*/Object.freeze({\n        intersect: intersect,\n        union: union,\n        subtract: subtract\n    });\n\n    let geometryToBSP = new WeakMap();\n    let enabled = true;\n    function clear() {\n        geometryToBSP = new WeakMap();\n    }\n    function enable() {\n        enabled = true;\n    }\n    function disable() {\n        enabled = false;\n        clear();\n    }\n    function getBSPForGeometry(geometry) {\n        return enabled ? geometryToBSP.get(geometry) : undefined;\n    }\n    function setBSPForGeometry(geometry, bsp) {\n        if (enabled) {\n            geometryToBSP.set(geometry, bsp);\n        }\n    }\n    function getOrSetBSP(geometry) {\n        if (enabled) {\n            let bsp = geometryToBSP.get(geometry);\n            if (bsp === undefined) {\n                bsp = new BSPNode(convertGeometryToTriangles(geometry));\n                geometryToBSP.set(geometry, bsp);\n            }\n            return bsp;\n        }\n        else {\n            return new BSPNode(convertGeometryToTriangles(geometry));\n        }\n    }\n    function remove(geometry) {\n        geometryToBSP.delete(geometry);\n    }\n\n    var cache = /*#__PURE__*/Object.freeze({\n        clear: clear,\n        enable: enable,\n        disable: disable,\n        getBSPForGeometry: getBSPForGeometry,\n        setBSPForGeometry: setBSPForGeometry,\n        getOrSetBSP: getOrSetBSP,\n        remove: remove\n    });\n\n    function geometryToMesh(geometry, material) {\n        // center geometry & apply position to a new mesh\n        geometry.computeBoundingBox();\n        const offset = new three.Vector3();\n        geometry.boundingBox.getCenter(offset);\n        geometry.translate(-offset.x, -offset.y, -offset.z);\n        const mesh = new three.Mesh(geometry, material);\n        mesh.position.copy(offset);\n        return mesh;\n    }\n    function subtract$1(mesh1, mesh2, material) {\n        const bsp1 = getOrSetBSP(mesh1.geometry);\n        const bsp2 = getOrSetBSP(mesh2.geometry);\n        const bsp1Transformed = transformBSP(bsp1, mesh1);\n        const bsp2Transformed = transformBSP(bsp2, mesh2);\n        const result = subtract(bsp1Transformed, bsp2Transformed);\n        const geometry = result.toGeometry();\n        setBSPForGeometry(geometry, result);\n        return geometryToMesh(geometry, material);\n    }\n    function union$1(mesh1, mesh2, material) {\n        const bsp1 = getOrSetBSP(mesh1.geometry);\n        const bsp2 = getOrSetBSP(mesh2.geometry);\n        const bsp1Transformed = transformBSP(bsp1, mesh1);\n        const bsp2Transformed = transformBSP(bsp2, mesh2);\n        const result = union(bsp1Transformed, bsp2Transformed);\n        const geometry = result.toGeometry();\n        setBSPForGeometry(geometry, result);\n        return geometryToMesh(geometry, material);\n    }\n    function intersect$1(mesh1, mesh2, material) {\n        const bsp1 = getOrSetBSP(mesh1.geometry);\n        const bsp2 = getOrSetBSP(mesh2.geometry);\n        const bsp1Transformed = transformBSP(bsp1, mesh1);\n        const bsp2Transformed = transformBSP(bsp2, mesh2);\n        const result = intersect(bsp1Transformed, bsp2Transformed);\n        const geometry = result.toGeometry();\n        setBSPForGeometry(geometry, result);\n        return geometryToMesh(geometry, material);\n    }\n\n    exports.BSPNode = BSPNode;\n    exports.convertGeometryToTriangles = convertGeometryToTriangles;\n    exports.transformBSP = transformBSP;\n    exports.boolean = boolean;\n    exports.cache = cache;\n    exports.subtract = subtract$1;\n    exports.union = union$1;\n    exports.intersect = intersect$1;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n"],"names":["this"],"mappings":"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"}